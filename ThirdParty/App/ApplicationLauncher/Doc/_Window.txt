.. -*- mode: rst; encoding: utf-8 -*-

.. meta::
   :description: Provides the ability to create, configure, show, and manage the lifetime of windows.

============
Window Class
============
----------------------------------------------------------------------------------------------------------------------------------------------------------
namespace `NoesisApp <Gui.Core._ClassHierarchy.html#noesisapp-namespace>`__ | `MSDN <http://msdn.microsoft.com/en-us/library/system.windows.window.aspx>`_
----------------------------------------------------------------------------------------------------------------------------------------------------------

Provides the ability to create, configure, show, and manage the lifetime of windows. 

 



Inheritance Hierarchy
=====================

.. |bullet| unicode:: U+2022 .. Circular Bullet
.. |INDEX| image:: icon_index.png
   :align: middle

|  |bullet| `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`__
|   |bullet| `DependencyObject <Gui.DependencySystem._DependencyObject.html>`__
|    |bullet| `Visual <Gui.Core._Visual.html>`__
|     |bullet| `UIElement <Gui.Core._UIElement.html>`__
|      |bullet| `FrameworkElement <Gui.Core._FrameworkElement.html>`__
|       |bullet| `Control <Gui.Core._Control.html>`__
|        |bullet| `ContentControl <Gui.Core._ContentControl.html>`__
|         |bullet| *Window*


|INDEX| `Class Hierarchy Index <Gui.Core._ClassHierarchy.html>`__


Methods
=======

.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *Activated*                                        Occurs when window becomes the foreground window                                                                                                                
  *Close*                                            Manually closes window                                                                                                                                          
  *Closed*                                           Occurs after window has been closed                                                                                                                             
  *Deactivated*                                      Occurs when window becomes a background window.                                                                                                                 
  *Init*                                             Initializes the window with the given display and render context                                                                                                
  *LocationChanged*                                  Occurs when the window's location changes                                                                                                                       
  *Render*                                           Renders frame at the given time                                                                                                                                 
  *Shutdown*                                         Frees allocated render resources                                                                                                                                
  *StateChanged*                                     Occurs when the window's WindowState property changes                                                                                                           
  ================================================== ================================================================================================================================================================

|

From `FrameworkElement <Gui.Core._FrameworkElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *AncestorChanged*                                  Notifies when an ancestor has changed its parent                                                                                                                
  *AncestorNameScopeChanged*                         Notifies when a `NameScope <Gui.Core._NameScope.html>`_ in an ancestor has changed any of its items                                                             
  *AncestorResourcesChanged*                         Notifies when a change occurred in the resources dictionary of this element or an ancestor                                                                      
  *ApplyFrameworkTemplate*                           Applies a template on this element for the provided context                                                                                                     
  *BringIntoView*                                    Attempts to bring this element into view, within any scrollable regions it is contained within.                                                                 
  *BringIntoView*                                    Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.                                     
  *Clone*                                            Returns a clone of this element. Used when applying a template                                                                                                  
  *ConnectEvent*                                     Attaches specified event to code-behind content                                                                                                                 
  *FindName*                                         Provides accessors that simplifies access to the `NameScope <Gui.Core._NameScope.html>`_ registration methods                                                   
  *FindResource*                                     Finds a resource looking in the logical parent chain                                                                                                            
  *GetBindingExpression*                             Returns a binding expression if the target property has an active binding; otherwise, returns null                                                              
  *GetFrameworkTemplate*                             Gets applied template on this element                                                                                                                           
  *GetParentOrTemplatedParent*                       Template management Gets the logical parent or the templated parent when logical parent is not available                                                        
  *GetStateGroupsRoot*                               Gets root for `VisualState <Gui.Animation._VisualState.html>`_ management                                                                                       
  *GetTemplateChild*                                 Looks for a named element in the applied template                                                                                                               
  *GetTemplateRoot*                                  Gets the root element of the applied template                                                                                                                   
  *GetTimeManager*                                   Gets the TimeManager that controls current element                                                                                                              
  *IsLoaded*                                         Gets a value that indicates whether this element has been loaded for presentation.                                                                              
  *SetBinding*                                       Attaches a binding to this element, based on the provided binding object                                                                                        
  *SetBinding*                                       Attaches a binding to this element, based on the provided source property name as a path qualification to the data source                                       
  ================================================== ================================================================================================================================================================

From `UIElement <Gui.Core._UIElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *AddHandler*                                       Adds a handler to the specified routed event                                                                                                                    
  *Arrange*                                          Positions child elements and determines a size for a `UIElement <Gui.Core._UIElement.html>`_. Parent elements call this method from their *ArrangeCore* implementation to form a recursive layout update. This method constitutes the second pass of a layout update 
  *CaptureMouse*                                     Attempts to force capture of the mouse to this element                                                                                                          
  *CaptureTouch*                                     Attempts to force capture of a touch to this element                                                                                                            
  *Focus*                                            Attempts to set focus to this element                                                                                                                           
  *GetKeyboard*                                      Gets keyboard input manager                                                                                                                                     
  *GetMouse*                                         Public methods in `UIElement <Gui.Core._UIElement.html>`_ Gets mouse input manager                                                                              
  *GetTouchCaptured*                                 Gets element captured by the specified touch device                                                                                                             
  *GetUIParent*                                      Gets the logical or visual parent for this element                                                                                                              
  *GetUIView*                                        Finds the View where this element is connected to traversing visual or logical ancestors                                                                        
  *InvalidateArrange*                                Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by *UpdateLayout* 
  *InvalidateMeasure*                                Invalidates the measurement state (layout) for the element                                                                                                      
  *InvalidateVisual*                                 Invalidates the rendering of the element, and forces a complete new layout pass. *OnRender* is called after the layout cycle is completed                       
  *IsArrangeValid*                                   Indicates if arrange is valid                                                                                                                                   
  *IsMeasureValid*                                   Indicates if measured size is valid                                                                                                                             
  *Measure*                                          Updates the *DesiredSize* of a `UIElement <Gui.Core._UIElement.html>`_. Parent elements call this method from their own *MeasureCore* implementations to form a recursive layout update. Calling this method constitutes the first pass of a layout update in the layout system 
  *MoveFocus*                                        Request to move the focus from this element to another element. Returns true if focus is moved successfully, returns false if there is no next element          
  *PredictFocus*                                     When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element 
  *RaiseEvent*                                       Raises a specific routed event. The `RoutedEvent <Gui.Core._RoutedEvent.html>`_ to be raised is identified within the RoutedEventArgs instance that is provided (as the `RoutedEvent <Gui.Core._RoutedEvent.html>`_ property of that event data) 
  *ReleaseAllTouchCaptures*                          Releases all captured touch devices from this element                                                                                                           
  *ReleaseMouseCapture*                              Releases the mouse capture, if this element held the capture                                                                                                    
  *ReleaseTouchCapture*                              Attempts to release the specified touch device from this element                                                                                                
  *RemoveHandler*                                    Removes a handler from the specified routed event                                                                                                               
  *UpdateLayout*                                     Ensures that all visual child elements of this element are properly updated for layout                                                                          
  ================================================== ================================================================================================================================================================

From `Visual <Gui.Core._Visual.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *FindCommonVisualAncestor*                         Finds the common ancestor of two visuals objects If *visual* is the same object as this, the common ancestor will be the parent                                 
  *GetRenderTreeId*                                  Gets RenderTree's identifier                                                                                                                                    
  *IsAncestorOf*                                     Determines whether the visual object is an ancestor of the descendant visual object This object is not considered to be an ancestor of *visual* if they are the same 
  *IsConnectedToView*                                Indicates if this visual has been connected to a View                                                                                                           
  *IsDescendantOf*                                   Determines whether the visual object is a descendant of the ancestor visual object This object is not considered to be a descendant of *visual* if they are the same 
  *IsInRenderTree*                                   Indicates if a render node has been created in the RenderTree for this visual                                                                                   
  *IsInvalidated*                                    Indicates if this visual is invalidated and should send updates to the render tree                                                                              
  *PointFromScreen*                                  Converts a Point in screen coordinates into a Point that represents the current coordinate system of the `Visual <Gui.Core._Visual.html>`_                      
  *PointToScreen*                                    Converts a Point that represents the current coordinate system of the `Visual <Gui.Core._Visual.html>`_ into a Point in screen coordinates                      
  *SetVisualBrushFlag*                               Sets the flag that indicates that this `Visual <Gui.Core._Visual.html>`_ contains a `VisualBrush <Gui.Core._VisualBrush.html>`_                                 
  *SubtreeDrawingCommandsChanged*                    Occurs when subtree render commands have changed                                                                                                                
  *TransformToAncestor*                              Returns a transform that can be used to transform coordinates from the `Visual <Gui.Core._Visual.html>`_ to the specified ancestor of the visual object         
  *TransformToDescendant*                            Returns a transform that can be used to transform coordinates from the `Visual <Gui.Core._Visual.html>`_ to the specified visual object descendant              
  *TransformToVisual*                                Returns a transform that can be used to transform coordinates from the `Visual <Gui.Core._Visual.html>`_ to the specified visual object                         
  *UpdateRender*                                     Pushes all the layout updates into the UI render thread queue to update render nodes                                                                            
  ================================================== ================================================================================================================================================================

From `DependencyObject <Gui.DependencySystem._DependencyObject.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *ClearAnimation*                                   Clears the animation value of a property                                                                                                                        
  *ClearAnimation*                                   Clears the animation value of a property                                                                                                                        
  *ClearLocalValue*                                  Clears the local value of a property The property to be cleared is specified by a `DependencyProperty <Gui.DependencySystem._DependencyProperty.html>`_ identifier 
  *CoerceValue*                                      Coerces and validates the effective property value                                                                                                              
  *CoerceValue*                                      Coerces and validates the effective property value                                                                                                              
  *DependencyPropertyChanged*                        Returns the PropertyChanged event                                                                                                                               
  *Destroyed*                                        Destroyed delegate is raised when object is going to be destroyed                                                                                               
  *GetBaseValue*                                     Returns the base value without animation nor coerce (this never returns `Expression <Gui.DependencySystem._Expression.html>`_ like GetLocalValue)               
  *GetExpression*                                    Gets the expression, if any, used to evaluate the specified property value                                                                                      
  *GetLocalValue*                                    Returns the local value of a dependency property, if it exists                                                                                                  
  *GetValue*                                         Returns the current effective value of a dependency property on this instance of a `DependencyObject <Gui.DependencySystem._DependencyObject.html>`_            
  *GetValueObject*                                   Returns the current effective value of a dependency property on this instance of a `DependencyObject <Gui.DependencySystem._DependencyObject.html>`_ as a boxed value 
  *GetValueProvider*                                 Gets the provider that returns the effective value for the specified dependency property                                                                        
  *HasAnimatedProperties*                            Returns true if there is any animated property                                                                                                                  
  *InvalidateProperty*                               Re-evaluates the effective value for the specified dependency property if necessary If null is passed, a full re-evaluation could be needed                     
  *IsCached*                                         Returns if the value is stored in the cache. If true, the priority is returned in the provider field                                                            
  *IsSealed*                                         Gets a value that indicates whether this instance is currently sealed (read-only)                                                                               
  *SetAnimation*                                     Sets the animated value of a property                                                                                                                           
  *SetCurrentValue*                                  Sets the current value of a dependency property. The current value is set on the coerce field, without modifying source or animated value                       
  *SetCurrentValueObject*                            Sets the current value of a dependency property using a boxed value                                                                                             
  *SetExpression*                                    Sets the expression to be evaluated dynamically to obtain the value of the property                                                                             
  *SetValue*                                         Sets the local value of a dependency property                                                                                                                   
  *SetValueObject*                                   Sets the local value (boxed) of a dependency property                                                                                                           
  ================================================== ================================================================================================================================================================

From `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 25 75
  :width: 100%

  ================================================== ================================================================================================================================================================
  Name                                               Description                                                                                                                                                     
  ================================================== ================================================================================================================================================================
  *CheckAccess*                                      Determines whether the calling thread has access to this `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`_                                      
  *VerifyAccess*                                     Enforces that the calling thread has access to this `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`_                                           
  ================================================== ================================================================================================================================================================



Properties
==========

.. |DP| image:: icon_dp.png
   :align: middle
.. |RO| image:: icon_ro.png
   :align: middle
.. |DP_RO| image:: icon_dp-ro.png
   :align: middle
.. |None| image:: icon_none.png
   :align: middle
.. |DP_| image:: icon_dp_.png
   :align: middle
.. |RO_| image:: icon_ro_.png
   :align: middle
.. |nbsp| unicode:: 0xA0
   :trim:

.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |DP|       *AllowsTransparency*                               Gets or sets a value that indicates whether a window's client area supports transparency                                                              
  |DP|       *Fullscreen*                                       Gets or sets window fullscreen flag                                                                                                                   
  |DP|       *IsActive*                                         Gets a value that indicates whether the window is active                                                                                              
  |DP|       *Left*                                             Gets or sets the position of the window's left edge, in relation to the desktop                                                                       
  |DP|       *ResizeMode*                                       Gets or sets the resize mode                                                                                                                          
  |DP|       *ShowInTaskbar*                                    Gets or sets a value that indicates whether the window has a task bar button                                                                          
  |DP|       *Title*                                            Gets or sets window title                                                                                                                             
  |DP|       *Top*                                              Gets or sets the position of the window's top edge, in relation to the desktop                                                                        
  |DP|       *Topmost*                                          Gets or sets a value that indicates whether window appears in the topmost z-order                                                                     
  |DP|       *WindowStartupLocation*                            Gets or sets the position of the window when first shown                                                                                              
  |DP|       *WindowState*                                      Gets or sets a value that indicates whether window is restored, minimized, or maximized                                                               
  |DP|       *WindowStyle*                                      Gets or sets window border style                                                                                                                      
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

|

From `ContentControl <Gui.Core._ContentControl.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |DP|       *Content*                                          Gets or sets the content of a `ContentControl <Gui.Core._ContentControl.html>`_                                                                       
  |DP|       *ContentTemplate*                                  Gets or sets the template used to display the content of the `ContentControl <Gui.Core._ContentControl.html>`_                                        
  |DP|       *ContentTemplateSelector*                          Gets or sets a `DataTemplateSelector <Gui.Core._DataTemplateSelector.html>`_ that provides custom logic for choosing the template used to display the content 
  |DP_RO|    *HasContent*                                       Gets a value that indicates whether the `ContentControl <Gui.Core._ContentControl.html>`_ contains content                                            
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

From `Control <Gui.Core._Control.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |DP|       *Background*                                       Gets or sets a `Brush <Gui.Core._Brush.html>`_ that describes the background of a control                                                             
  |DP|       *BorderBrush*                                      Gets or sets a `Brush <Gui.Core._Brush.html>`_ that describes the border of a control                                                                 
  |DP|       *BorderThickness*                                  Gets or sets the border Thickness of a control                                                                                                        
  |DP|       *FontFamily*                                       Gets or sets the `FontFamily <Gui.Core._FontFamily.html>`_ of the control                                                                             
  |DP|       *FontSize*                                         Gets or sets the font size                                                                                                                            
  |DP|       *FontStretch*                                      Gets or sets the FontStretch                                                                                                                          
  |DP|       *FontStyle*                                        Gets or sets the FontStyle                                                                                                                            
  |DP|       *FontWeight*                                       Gets or sets the FontWeight or thickness of the specified font                                                                                        
  |DP|       *Foreground*                                       Gets or sets a `Brush <Gui.Core._Brush.html>`_ that describes the foreground color                                                                    
  |DP|       *HorizontalContentAlignment*                       Gets or sets the HorizontalAlignment of a control's content                                                                                           
  |DP|       *IsFocusEngaged*                                   Get or sets a value that indicates whether focus is constrained within the control boundaries (for game pad/remote interaction)                       
  |DP|       *IsFocusEngagementEnabled*                         Get or sets a value that indicates whether focus can be constrained within the control boundaries (for game pad / remote interaction)                 
  |DP|       *IsTabStop*                                        Gets or sets a value that indicates whether a control is included in tab navigation.                                                                  
  |DP|       *Padding*                                          Gets or sets the padding inside a control                                                                                                             
  |DP|       *SupportsFocusEngagement*                          Get or sets a value that indicates whether this control supports focus engagement                                                                     
  |DP|       *TabIndex*                                         Gets or sets a value that determines the order in which elements receive focus when the user navigates through controls by using the TAB key.         
  |DP|       *Template*                                         Gets or sets `ControlTemplate <Gui.Core._ControlTemplate.html>`_ for this element                                                                     
  |DP|       *VerticalContentAlignment*                         Gets or sets the VerticalAlignment of a control's content                                                                                             
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

From `FrameworkElement <Gui.Core._FrameworkElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |DP_RO|    *ActualHeight*                                     Gets the rendered height of this element.                                                                                                             
  |DP_RO|    *ActualWidth*                                      Gets the rendered width of this element.                                                                                                              
  |DP|       *ContextMenu*                                      Gets or sets the context menu element that should appear whenever the context menu is requested through user interface (UI) from within this element. 
  |DP|       *Cursor*                                           Gets or sets the cursor that displays when the mouse pointer is over this element.                                                                    
  |DP|       *DataContext*                                      Gets or sets the data context for an element when it participates in data binding                                                                     
  |DP|       *DefaultStyleKey*                                  Gets or sets the key to use to reference the style for this control, when theme styles are used or defined                                            
  |DP|       *FocusVisualStyle*                                 Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus 
  |DP|       *ForceCursor*                                      Gets or sets a value that indicates whether this `FrameworkElement <Gui.Core._FrameworkElement.html>`_ should force the UI to render the cursor as declared by this element's Cursor property. 
  |DP|       *Height*                                           Gets or sets the suggested height of the element.                                                                                                     
  |DP|       *HorizontalAlignment*                              Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control 
  |DP|       *InputScope*                                       Gets or sets the context for input used by this element. The input scope, which modifies how input from alternative input methods is interpreted      
  |DP|       *LayoutTransform*                                  Gets or sets a graphics transformation that should apply to this element when layout is performed                                                     
  |DP|       *Margin*                                           Gets or sets the outer margin of an element.                                                                                                          
  |DP|       *MaxHeight*                                        Gets or sets the maximum height constraint of the element.                                                                                            
  |DP|       *MaxWidth*                                         Gets or sets the maximum width constraint of the element.                                                                                             
  |DP|       *MinHeight*                                        Gets or sets the minimum height constraint of the element.                                                                                            
  |DP|       *MinWidth*                                         Gets or sets the minimum width constraint of the element.                                                                                             
  |DP|       *Name*                                             Gets or sets the identifying name of the element. The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a XAML processor. 
  |DP|       *OverridesDefaultStyle*                            Gets or sets a value that indicates whether this element incorporates style properties from theme styles                                              
  |DP|       *PPAAMode*                                         Gets or sets a value that indicates whether antialiasing geometry is generated for this element. This property is inherited down by the visual tree   
  |RO|       *Parent*                                           Gets the logical parent element of this element                                                                                                       
  |NONE|     *Resources*                                        Gets or sets the locally-defined resource dictionary                                                                                                  
  |DP|       *Style*                                            Gets or sets the style used by this element when it is rendered                                                                                       
  |DP|       *Tag*                                              Gets or sets an arbitrary object value that can be used to store custom information about this element                                                
  |NONE|     *TemplatedParent*                                  Gets or sets the template parent of this element. This property is not relevant if the element was not created through a template                     
  |DP|       *ToolTip*                                          Gets or sets the tool-tip object that is displayed for this element in the user interface                                                             
  |RO|       *Triggers*                                         Get the trigger collection                                                                                                                            
  |DP|       *UseLayoutRounding*                                Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout                       
  |DP|       *VerticalAlignment*                                Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control. 
  |DP|       *Width*                                            Gets or sets the width of the element                                                                                                                 
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

From `UIElement <Gui.Core._UIElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |DP|       *AllowDrop*                                        Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation                                           
  |DP|       *Clip*                                             Gets or sets the geometry used to define the outline of the contents of an element                                                                    
  |DP|       *ClipToBounds*                                     Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element 
  |RO|       *CommandBindings*                                  Gets a collection of `CommandBinding <Gui.Core._CommandBinding.html>`_ objects associated with this element                                           
  |RO|       *DesiredSize*                                      Gets control's desired size (calculated after *Measure* process)                                                                                      
  |DP|       *Focusable*                                        Gets or sets a value that indicates whether the element can receive focus                                                                             
  |RO|       *InputBindings*                                    Gets a collection of `InputBinding <Gui.Core._InputBinding.html>`_ objects associated with this element                                               
  |DP|       *IsEnabled*                                        Gets or sets a value indicating whether this element is enabled in the user interface                                                                 
  |DP_RO|    *IsFocused*                                        Indicates whether this element has the focus                                                                                                          
  |DP|       *IsHitTestVisible*                                 Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content       
  |DP_RO|    *IsKeyboardFocusWithin*                            Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements                                       
  |DP_RO|    *IsKeyboardFocused*                                Gets a value indicating whether this element has keyboard focus                                                                                       
  |DP|       *IsManipulationEnabled*                            Gets or sets a value that indicates whether manipulation events are enabled on this element                                                           
  |DP_RO|    *IsMouseCaptureWithin*                             Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree                                    
  |DP_RO|    *IsMouseCaptured*                                  Gets a value indicating whether the mouse is captured to this element                                                                                 
  |DP_RO|    *IsMouseDirectlyOver*                              Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.   
  |DP_RO|    *IsMouseOver*                                      Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree)                          
  |DP_RO|    *IsVisible*                                        Indicates whether this element is visible in the user interface                                                                                       
  |DP|       *Opacity*                                          Gets or sets the opacity factor applied to the entire element when it is rendered                                                                     
  |DP|       *OpacityMask*                                      Gets or sets an opacity mask, as a `Brush <Gui.Core._Brush.html>`_ implementation that is applied to any alpha-channel masking for the rendered content of this element 
  |DP|       *Projection*                                       Gets or sets the perspective projection (3D effect) to apply when rendering this element                                                              
  |RO|       *RenderSize*                                       Gets calculated (during *Arrange*) render size                                                                                                        
  |DP|       *RenderTransform*                                  Gets or sets transform information that affects the rendering position of this element                                                                
  |DP|       *RenderTransformOrigin*                            Gets or sets the center point of any possible render transform declared by *RenderTransform*, relative to the bounds of the element                   
  |DP|       *Visibility*                                       Gets or sets the user interface visibility of this element                                                                                            
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

From `Visual <Gui.Core._Visual.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |RO|       *View*                                             Gets the view where this visual is connected to                                                                                                       
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only

From `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ========== ================================================== ======================================================================================================================================================
  |          Name                                               Description                                                                                                                                           
  ========== ================================================== ======================================================================================================================================================
  |RO|       *ThreadId*                                         Gets the thread this `DispatcherObject <Gui.DependencySystem._DispatcherObject.html>`_ is associated with                                             
  ========== ================================================== ======================================================================================================================================================

.. class:: legend

  |DP_| Dependency Property |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |RO_| Read-only



Events
======


.. |R| image:: ev_r-icon.png
   :align: middle
.. |N| image:: ev_nr-icon.png
   :align: middle
.. |D| image:: ev_d-icon.png
   :align: middle

From `Control <Gui.Core._Control.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ===== ================================================== ======================================================================================================================================================
  |     Name                                               Description                                                                                                                                           
  ===== ================================================== ======================================================================================================================================================
  |R|   *MouseDoubleClick*                                 Occurs when a mouse button is clicked two or more times                                                                                               
  |R|   *PreviewMouseDoubleClick*                          Occurs when a user clicks the mouse button two or more times                                                                                          
  ===== ================================================== ======================================================================================================================================================

.. class:: legend

  |R| Routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |N| Non-routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |D| Delegate Event

From `FrameworkElement <Gui.Core._FrameworkElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ===== ================================================== ======================================================================================================================================================
  |     Name                                               Description                                                                                                                                           
  ===== ================================================== ======================================================================================================================================================
  |R|   *ContextMenuClosing*                               Occurs just before any context menu on the element is closed                                                                                          
  |R|   *ContextMenuOpening*                               Occurs when any context menu on the element is opened                                                                                                 
  |N|   *DataContextChanged*                               Occurs when the data context for this element changes                                                                                                 
  |N|   *Initialized*                                      Occurs when this element is initialized                                                                                                               
  |R|   *Loaded*                                           Occurs when the element is laid out, rendered, and ready for interaction                                                                              
  |R|   *RequestBringIntoView*                             Occurs when BringIntoView is called on this element                                                                                                   
  |R|   *SizeChanged*                                      Occurs when either ActualHeight or ActualWidth properties change value on this element                                                                
  |R|   *ToolTipClosing*                                   Occurs just before any tooltip on the element is closed                                                                                               
  |R|   *ToolTipOpening*                                   Occurs when any tooltip on the element is opened                                                                                                      
  |R|   *Unloaded*                                         Occurs when the element is removed from within an element tree of loaded elements                                                                     
  ===== ================================================== ======================================================================================================================================================

.. class:: legend

  |R| Routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |N| Non-routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |D| Delegate Event

From `UIElement <Gui.Core._UIElement.html>`__
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. table::
  :widths: 5 20 75
  :width: 100%

  ===== ================================================== ======================================================================================================================================================
  |     Name                                               Description                                                                                                                                           
  ===== ================================================== ======================================================================================================================================================
  |R|   *DragEnter*                                        Occurs when mouse enters the target of a dragging operation                                                                                           
  |R|   *DragLeave*                                        Occurs when mouse leaves the target of a dragging operation                                                                                           
  |R|   *DragOver*                                         Occurs when mouse is moved over the target of a dragging operation                                                                                    
  |R|   *Drop*                                             Notifies target object of a dragging operation that data is being dropped                                                                             
  |N|   *FocusableChanged*                                 Occurs when the value of the Focusable property changes                                                                                               
  |R|   *GiveFeedback*                                     Notifies source object of a dragging operation to provide feedback to the user                                                                        
  |R|   *GotFocus*                                         Occurs when this element gets logical focus                                                                                                           
  |R|   *GotKeyboardFocus*                                 Occurs when the keyboard is focused on this element                                                                                                   
  |R|   *GotMouseCapture*                                  Occurs when this element captures the mouse                                                                                                           
  |R|   *GotTouchCapture*                                  Occurs when a touch is captured to this element                                                                                                       
  |N|   *IsEnabledChanged*                                 Occurs when the value of the IsEnabled property on this element changes                                                                               
  |N|   *IsHitTestVisibleChanged*                          Occurs when the value of the IsHitTestVisible dependency property changes on this element                                                             
  |N|   *IsKeyboardFocusWithinChanged*                     Occurs when the value of the IsKeyboardFocusWithinChanged property changes on this element                                                            
  |N|   *IsKeyboardFocusedChanged*                         Occurs when the value of the IsKeyboardFocused property changes on this element                                                                       
  |N|   *IsMouseCaptureWithinChanged*                      Occurs when the value of the IsMouseCaptureWithinProperty changes on this element                                                                     
  |N|   *IsMouseCapturedChanged*                           Occurs when the value of the IsMouseCaptured property changes on this element                                                                         
  |N|   *IsMouseDirectlyOverChanged*                       Occurs when the value of the IsMouseDirectlyOver property changes on this element                                                                     
  |N|   *IsVisibleChanged*                                 Occurs when the value of the IsVisible property changes on this element                                                                               
  |R|   *KeyDown*                                          Occurs when a key is pressed while focus is on this element                                                                                           
  |R|   *KeyUp*                                            Occurs when a key is released while focus is on this element                                                                                          
  |R|   *LostFocus*                                        Occurs when this element loses logical focus                                                                                                          
  |R|   *LostKeyboardFocus*                                Occurs when the keyboard is no longer focused on this element                                                                                         
  |R|   *LostMouseCapture*                                 Occurs when this element loses mouse capture                                                                                                          
  |R|   *LostTouchCapture*                                 Occurs when this element loses a touch capture                                                                                                        
  |R|   *ManipulationCompleted*                            Occurs when a manipulation and inertia on the `UIElement <Gui.Core._UIElement.html>`_ object is complete                                              
  |R|   *ManipulationDelta*                                Occurs when the input device changes position during a manipulation                                                                                   
  |R|   *ManipulationInertiaStarting*                      Occurs when the input device loses contact with the `UIElement <Gui.Core._UIElement.html>`_ during a manipulation and inertia begins                  
  |R|   *ManipulationStarted*                              Occurs when an input device begins a manipulation on the `UIElement <Gui.Core._UIElement.html>`_ object                                               
  |R|   *ManipulationStarting*                             Occurs when the manipulation processor is first created                                                                                               
  |R|   *MouseDown*                                        Occurs when any mouse button is pressed while the pointer is over this element                                                                        
  |R|   *MouseEnter*                                       Occurs when the mouse pointer enters the bounds of this element                                                                                       
  |R|   *MouseLeave*                                       Occurs when the mouse pointer leaves the bounds of this element                                                                                       
  |R|   *MouseLeftButtonDown*                              Occurs when the left mouse button is pressed while the mouse pointer is over this element                                                             
  |R|   *MouseLeftButtonUp*                                Occurs when the left mouse button is released while the mouse pointer is over this element                                                            
  |R|   *MouseMove*                                        Occurs when the mouse pointer moves while over this element                                                                                           
  |R|   *MouseRightButtonDown*                             Occurs when the right mouse button is pressed while the mouse pointer is over this element                                                            
  |R|   *MouseRightButtonUp*                               Occurs when the right mouse button is released while the mouse pointer is over this element                                                           
  |R|   *MouseUp*                                          Occurs when any mouse button is released over this element                                                                                            
  |R|   *MouseWheel*                                       Occurs when the user rotates the mouse wheel while the mouse pointer is over this element                                                             
  |R|   *PreviewDragEnter*                                 Occurs when mouse enters the target of a dragging operation                                                                                           
  |R|   *PreviewDragLeave*                                 Occurs when mouse leaves the target of a dragging operation                                                                                           
  |R|   *PreviewDragOver*                                  Occurs when mouse is moved over the target of a dragging operation                                                                                    
  |R|   *PreviewDrop*                                      Notifies target object of a dragging operation that data is being dropped                                                                             
  |R|   *PreviewGiveFeedback*                              Notifies source object of a dragging operation to provide feedback to the user                                                                        
  |R|   *PreviewGotKeyboardFocus*                          Occurs when the keyboard is focused on this element                                                                                                   
  |R|   *PreviewKeyDown*                                   Occurs when a key is pressed while focus is on this element                                                                                           
  |R|   *PreviewKeyUp*                                     Occurs when a key is released while focus is on this element                                                                                          
  |R|   *PreviewLostKeyboardFocus*                         Occurs when the keyboard is no longer focused on this element                                                                                         
  |R|   *PreviewMouseDown*                                 Occurs when any mouse button is pressed while the pointer is over this element                                                                        
  |R|   *PreviewMouseLeftButtonDown*                       Occurs when the left mouse button is pressed while the mouse pointer is over this element                                                             
  |R|   *PreviewMouseLeftButtonUp*                         Occurs when the left mouse button is released while the mouse pointer is over this element                                                            
  |R|   *PreviewMouseMove*                                 Occurs when the mouse pointer moves while the mouse pointer is over this element                                                                      
  |R|   *PreviewMouseRightButtonDown*                      Occurs when the right mouse button is pressed while the mouse pointer is over this element                                                            
  |R|   *PreviewMouseRightButtonUp*                        Occurs when the right mouse button is released while the mouse pointer is over this element                                                           
  |R|   *PreviewMouseUp*                                   Occurs when any mouse button is released while the mouse pointer is over this element                                                                 
  |R|   *PreviewMouseWheel*                                Occurs when the user rotates the mouse wheel while the mouse pointer is over this element                                                             
  |R|   *PreviewQueryContinueDrag*                         Notifies source object of a dragging operation                                                                                                        
  |R|   *PreviewTextInput*                                 Occurs when this element gets text in a device-independent manner                                                                                     
  |R|   *PreviewTouchDown*                                 Occurs when a finger touches the screen while the finger is over this element                                                                         
  |R|   *PreviewTouchMove*                                 Occurs when a finger moves on the screen while the finger is over this element                                                                        
  |R|   *PreviewTouchUp*                                   Occurs when a finger is raised off of the screen while the finger is over this element                                                                
  |R|   *QueryContinueDrag*                                Notifies source object of a dragging operation                                                                                                        
  |R|   *QueryCursor*                                      Occurs when the cursor is requested to display                                                                                                        
  |R|   *TextInput*                                        Occurs when this element gets text in a device-independent manner                                                                                     
  |R|   *TouchDown*                                        Occurs when a finger touches the screen while the finger is over this element                                                                         
  |R|   *TouchEnter*                                       Occurs when a touch moves from outside to inside the bounds of this element                                                                           
  |R|   *TouchLeave*                                       Occurs when a touch moves from inside to outside the bounds of this element                                                                           
  |R|   *TouchMove*                                        Occurs when a finger moves on the screen while the finger is over this element                                                                        
  |R|   *TouchUp*                                          Occurs when a finger is raised off of the screen while the finger is over this element                                                                
  ===== ================================================== ======================================================================================================================================================

.. class:: legend

  |R| Routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |N| Non-routed Event |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |nbsp| |D| Delegate Event


